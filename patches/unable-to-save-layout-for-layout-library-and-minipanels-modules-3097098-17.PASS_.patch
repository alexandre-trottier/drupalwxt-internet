diff --git a/src/Traits/PluginHelperTrait.php b/src/Traits/PluginHelperTrait.php
index 7271e8b..4f111fb 100644
--- a/src/Traits/PluginHelperTrait.php
+++ b/src/Traits/PluginHelperTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_restrictions\Traits;
 
+use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Plugin\Context\EntityContext;
 use Drupal\layout_builder\Context\LayoutBuilderContextTrait;
 use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
@@ -107,13 +108,20 @@ trait PluginHelperTrait {
     if ($requested_value == 'contexts') {
       return $contexts;
     }
-
     if ($section_storage instanceof OverridesSectionStorageInterface) {
       $entity = $contexts['entity']->getContextValue();
       $view_mode = $contexts['view_mode']->getContextValue();
       $entity_type = $entity->getEntityTypeId();
       $bundle = $entity->bundle();
     }
+    elseif (isset($contexts['entity']) && $contexts['entity']->getContextValue() instanceof ConfigEntityBase) {
+      $entity = $view_display = $contexts['entity']->getContextValue();
+      $entity_type = $entity->getEntityTypeId();
+      $bundle = $entity->bundle();
+    }
+    elseif (get_class($section_storage) == 'Drupal\mini_layouts\Plugin\SectionStorage\MiniLayoutSectionStorage') {
+      $view_display = $contexts['display']->getContextValue();
+    }
     elseif (isset($contexts['display'])) {
       $entity = $contexts['display']->getContextValue();
       $view_mode = $entity->getMode();
@@ -146,8 +154,9 @@ trait PluginHelperTrait {
     if ($requested_value == 'storage') {
       return $storage;
     }
-
-    $view_display = $storage->load($context);
+    if (!$view_display) {
+      $view_display = $storage->load($context);
+    }
     if ($requested_value == 'view_display') {
       return $view_display;
     }
diff --git a/tests/src/FunctionalJavascript/DashboardsIntegrationTest.php b/tests/src/FunctionalJavascript/DashboardsIntegrationTest.php
new file mode 100644
index 0000000..a016fd2
--- /dev/null
+++ b/tests/src/FunctionalJavascript/DashboardsIntegrationTest.php
@@ -0,0 +1,70 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions\FunctionalJavascript;
+
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Demonstrate that Layout Builder Restrictions works with Dashboards.
+ *
+ * @group layout_builder_restrictions
+ *
+ * @requires dashboards
+ */
+class DashboardsIntegrationTest extends WebDriverTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'layout_builder',
+    'layout_builder_restrictions',
+    'dashboards',
+    'field_ui',
+    'node',
+  ];
+
+  /**
+   * Specify the theme to be used in testing.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'classy';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    $this->strictConfigSchema = NULL;
+    parent::setUp();
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'access administration pages',
+      'configure any layout',
+      'administer dashboards',
+    ]));
+  }
+
+  /**
+   * Verify that Layout Builder Restrictions does not break Dashboards.
+   */
+  public function testDashboardsWithRestrictionsEnabled() {
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+
+    $this->drupalGet('admin/structure/dashboards/add');
+    $page->fillField('Administrative Label', 'Charlie');
+    $this->assertNotEmpty($assert_session->waitForText('Machine name: charlie'));
+    $page->pressButton('Save');
+    $this->drupalGet('dashboards/charlie/layout');
+    $page->clickLink('Add section');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', '.layout-selection'));
+    $page->clickLink('One column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Add section');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->clickLink('Add block');
+    $assert_session->assertWaitOnAjaxRequest();
+  }
+
+}
diff --git a/tests/src/FunctionalJavascript/MiniLayoutsIntegrationTest.php b/tests/src/FunctionalJavascript/MiniLayoutsIntegrationTest.php
new file mode 100644
index 0000000..4f0e0fb
--- /dev/null
+++ b/tests/src/FunctionalJavascript/MiniLayoutsIntegrationTest.php
@@ -0,0 +1,71 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions\FunctionalJavascript;
+
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Demonstrate that Layout Builder Restrictions works with Mini Layouts.
+ *
+ * @group layout_builder_restrictions
+ *
+ * @requires mini_layouts
+ */
+class MiniLayoutsIntegrationTest extends WebDriverTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'layout_builder',
+    'layout_builder_restrictions',
+    'mini_layouts',
+    'field_ui',
+    'node',
+  ];
+
+  /**
+   * Specify the theme to be used in testing.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'classy';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'access administration pages',
+      'configure any layout',
+      'administer mini layouts',
+    ]));
+  }
+
+  /**
+   * Verify that Layout Builder Restrictions does not break Mini Layouts.
+   */
+  public function testMiniLayoutsWithRestrictionsEnabled() {
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+
+    $this->drupalGet('admin/structure/mini_layouts/add');
+    $page->fillField('Administrative Label', 'Charlie');
+    $this->assertNotEmpty($assert_session->waitForText('Machine name: charlie'));
+    $page->fillField('Label', 'Bravo');
+    $this->assertNotEmpty($assert_session->waitForText('Machine name: bravo'));
+    $page->pressButton('Save');
+    $this->drupalGet('admin/structure/mini_layouts/manage/charlie/layout');
+    $page->clickLink('Add section');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', '.layout-selection'));
+    $page->clickLink('One column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Add section');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->clickLink('Add block');
+    $assert_session->assertWaitOnAjaxRequest();
+  }
+
+}
